import { useLayoutEffect, useRef } from "react";
import type { NextPage } from "next";
import { useQuery } from "@tanstack/react-query";
import Head from "next/head";
import { FaArrowDown } from "react-icons/fa";
import { useForm, Controller } from "react-hook-form";
import { useSpring } from "framer-motion";

import { fetchSchools } from "../utils/queries";
import Header from "../components/header";
import SchoolSearch from "../components/school-search";

/** TYPES */
type FormValues = {
  /** School choice */
  school: {
    value: string;
    label: string;
  };
  /** Whether the aid is for in-state or out-of-state */
  location: string;
  /** Amount of aid the institution provides the student */
  aidAmount: number;
};

const Marketing: NextPage = () => {
  /** Form State */
  const {
    register,
    handleSubmit,
    watch,
    control,
    formState: { isSubmitting, isSubmitSuccessful, errors },
  } = useForm<FormValues>();
  const schoolValue = watch("school")?.value;
  const locationValue = watch("location");
  const aidAmountValue = watch("aidAmount");

  const onSubmit = (data: FormValues) => console.log(data);

  /** Data Fetching */
  const schoolQuery = useQuery({
    queryKey: ["schools"],
    queryFn: fetchSchools,
  });

  /** Slide Refs */
  const locationRef = useRef<HTMLElement>(null);
  const aidRef = useRef<HTMLElement>(null);

  /** Animation utils */
  /** Source for slide scroll animation: https://codesandbox.io/s/kxv7r?file=/src/App.js */
  const spring = useSpring(0);

  useLayoutEffect(() => {
    spring.onChange((latest) => {
      window.scrollTo(0, latest);
    });
  }, [spring]);

  const moveTo = (to: any) => {
    spring.set(window.pageYOffset, false);
    setTimeout(() => {
      spring.set(to);
    }, 50);
  };

  return (
    <div>
      <Head>
        <title>GradeMyAid</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main>
        <section className="relative flex min-h-screen items-center justify-center bg-emerald-100">
          {/* <div className="h-80 w-80 rounded-xl bg-orange-100"></div> */}
          <div className="container mx-auto px-4">
            <h2 className="relative z-10 mx-auto mb-8 max-w-xl text-center text-5xl font-black tracking-wide lg:max-w-2xl lg:text-7xl">
              How good is your financial aid? ðŸ’¸
            </h2>
            <div className="mx-auto max-w-lg">
              <Controller
                control={control}
                rules={{ required: true }}
                name="school"
                render={({ field: { onChange } }) => (
                  <SchoolSearch handleChange={onChange} />
                )}
              />
            </div>
            {schoolValue && (
              <div className="absolute bottom-[10%] left-1/2 -translate-x-1/2 transform text-center">
                <button
                  type="button"
                  onClick={() => moveTo(locationRef?.current?.offsetTop)}
                >
                  <FaArrowDown className="mx-auto animate-bounce text-2xl transition" />
                </button>
              </div>
            )}
            {/* <div className="flex space-x-2">
                <button className="flex items-center justify-center rounded bg-violet-300 px-4 py-2 font-bold ring-emerald-100 transition hover:ring-2 focus-visible:ring-2">
                  <span className="mr-2">Start Grade</span>
                </button>
              </div> */}
            {/* <svg
              className="absolute top-0 right-0 z-0 h-[36rem] w-[36rem] overflow-x-hidden"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 600 600"
            >
              <g transform="translate(300,300)">
                <path
                  d="M108.7,-102.8C139.7,-47.8,163,-2.6,157.3,41.4C151.6,85.4,117,128.3,71.9,150.5C26.8,172.7,-28.9,174.2,-85.4,155.4C-141.9,136.6,-199.1,97.6,-217.2,42.6C-235.3,-12.3,-214.2,-83.2,-171.5,-140.9C-128.7,-198.7,-64.4,-243.3,-12.8,-233.2C38.8,-223,77.7,-157.9,108.7,-102.8Z"
                  fill="#34d399"
                />
              </g>
            </svg> */}
          </div>
        </section>
        <section
          className="relative flex min-h-screen items-center justify-center bg-emerald-400"
          ref={locationRef}
        >
          <div className="container mx-auto px-4">
            <h2 className="relative z-10 mx-auto mb-8 max-w-xl text-center text-5xl font-black tracking-wide lg:max-w-3xl lg:text-7xl">
              What type of location is the aid?
            </h2>
            <div className="mx-auto text-center">
              <div className="mx-auto flex w-40 flex-col text-left">
                <div className="flex items-center justify-between">
                  <label htmlFor="inState" className="mr-1 text-xl">
                    In-state
                  </label>
                  <input
                    type="radio"
                    id="inState"
                    value="inState"
                    className="form-radio text-emerald-700 focus:ring-emerald-700"
                    {...register("location")}
                  />
                </div>
                <div className="flex items-center justify-between">
                  <label htmlFor="outState" className="mr-1 text-xl">
                    Out-of-state
                  </label>
                  <input
                    type="radio"
                    id="outState"
                    value="outState"
                    className="form-radio text-emerald-700 focus:ring-emerald-700"
                    {...register("location")}
                  />
                </div>
              </div>
            </div>
            {locationValue && (
              <div className="absolute bottom-[10%] left-1/2 -translate-x-1/2 transform text-center">
                <button
                  type="button"
                  onClick={() => moveTo(aidRef?.current?.offsetTop)}
                >
                  <FaArrowDown className="mx-auto animate-bounce text-2xl transition" />
                </button>
              </div>
            )}
          </div>
        </section>
        <section
          className="relative flex min-h-screen items-center justify-center bg-emerald-500"
          ref={aidRef}
        >
          <div className="container mx-auto px-4">
            <h2 className="relative z-10 mx-auto mb-8 max-w-xl text-center text-5xl font-black tracking-wide lg:max-w-3xl lg:text-7xl">
              What was your yearly aid amount?
            </h2>
            <div className="mx-auto text-center">
              <input
                type="number"
                className="form-input w-80 rounded-full border-2 border-gray-300 px-4 py-2 ring-gray-300 focus:border-emerald-700 focus:outline-none focus:ring-emerald-700"
                placeholder="Enter your yearly aid amount..."
                min="0"
                {...register("aidAmount")}
              />
            </div>
            <div className="absolute bottom-1/4 left-1/2 -translate-x-1/2 transform text-center">
              <button
                type="button"
                onClick={handleSubmit(onSubmit)}
                className="min-w-[180px] rounded-full bg-violet-300 px-4 py-2 font-bold shadow shadow-emerald-600 transition focus-within:scale-105 hover:scale-105"
              >
                Get your rating
              </button>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default Marketing;
