import router from "next/router";
import { useSupabaseClient, useUser } from "@supabase/auth-helpers-react";
import { useEffect, useState } from "react";
import Head from "next/head";
import Header from "../components/header";
import { FaUser } from "react-icons/fa";
import Image from "next/image";
import {
  createServerSupabaseClient,
  Session,
  User,
} from "@supabase/auth-helpers-nextjs";
import { GetServerSideProps, NextPage } from "next";
import { Database } from "../utils/database.types";
import Button from "../components/button";

type DashboardPageProps = {
  initialSession: Session;
  user: User;
};

const DashboardPage: NextPage<DashboardPageProps> = (props) => {
  const supabase = useSupabaseClient<Database>();

  type pageTypes = "account" | "grades" | "colleges";

  const [pageName, setPageName] = useState<pageTypes>("account");
  const [isResetting, setIsResetting] = useState(false);
  const [resetWarning, setResetWarning] = useState(false);

  async function signOut() {
    const { error } = await supabase.auth.signOut();

    if (error) {
      console.error(error.message, error);
    }

    router.push("/");
  }
  async function resetPassword() {
    if (props.user?.email && props.user.app_metadata.provider === "email") {
      const { data, error } = await supabase.auth.resetPasswordForEmail(
        props.user?.email
      );
      if (error) {
        console.error(error.message, error);
      }

      if (data) {
        showResettingToast();
      }
    }
  }

  async function selectAccount() {
    setPageName("account");
  }

  async function selectGrades() {
    setPageName("grades");
  }

  async function selectColleges() {
    setPageName("colleges");
  }

  async function selectGetGrade() {
    router.push(`/`);
  }

  console.log(props.user);

  const showResetPasswordWarning = () => {
    setResetWarning(true);
    setTimeout(() => {
      setResetWarning(false);
    }, 2000);
  };
  const showResettingToast = () => {
    setIsResetting(true);
    setTimeout(() => {
      setIsResetting(false);
    }, 2000);
  };

  return (
    <div>
      <Head>
        <title>Dashboard - GradeMyAid</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="min-h-screen bg-green-100">
        <div className="container mx-auto py-28 px-4 text-center">
          <div className="mx-auto mb-4 space-y-1">
            {props.user?.user_metadata.avatar_url ? (
              <Image
                width={96}
                height={96}
                src={props.user?.user_metadata.avatar_url}
                alt={`Avatar image for the user ${props.user?.email}`}
                className="rounded-full"
              />
            ) : (
              <div className="mx-auto flex h-24 w-24 items-center justify-center rounded-full bg-emerald-700">
                <FaUser color="white" size={40} />
              </div>
            )}
            <h2 className="text-xl font-bold">
              {props.user?.user_metadata.full_name ?? props.user?.email}
            </h2>
          </div>
          <div className="flex justify-center">
            {/* Start Side Bar element */}
            <div className="flex flex-wrap gap-4 rounded-full bg-emerald-300 px-4 py-2">
              {/* Start Account sidebar element*/}
              <button
                className={`rounded-full p-2 font-bold transition hover:ring-2 hover:ring-emerald-200 ${
                  pageName === "account" && "bg-emerald-200"
                }`}
                onClick={selectAccount}
              >
                User Account
              </button>
              {/* End dashboard sidebar element*/}

              {/* Start Saved Grades side bar element */}
              <button
                className={`rounded-full p-2 font-bold transition hover:ring-2 hover:ring-emerald-200 ${
                  pageName === "grades" && "bg-emerald-200"
                }`}
                onClick={selectGrades}
              >
                Saved Grades
              </button>
              {/* End Saved Grades side bar element*/}

              {/* Start Saved Colleges side bar element */}
              <button
                className={`rounded-full p-2 font-bold transition hover:ring-2 hover:ring-emerald-200 ${
                  pageName === "colleges" && "bg-emerald-200"
                }`}
                onClick={selectColleges}
              >
                Saved Colleges
              </button>
              {/* End Saved Colleges side bar element */}

              {/* Start Grade side bar element */}

              <button
                className={`rounded-full p-2 transition hover:ring-2 hover:ring-emerald-200`}
                onClick={selectGetGrade}
              >
                <b>Get Grade </b>
              </button>
              {/* End Grade side bar element */}
            </div>
          </div>
          <div className="mt-16">
            {
              // === compares types as well as the value
              pageName === "account" && (
                <div className="mx-auto flex h-96 w-96 flex-col items-center justify-center rounded-2xl bg-white p-8 shadow shadow-emerald-200">
                  <div className="flex w-full justify-between">
                    <p>Email:</p>
                    <p>{props.user.email}</p>
                  </div>
                  <div>
                    <button
                      className="boarder rounded-full bg-emerald-400 px-4 py-2 hover:text-white"
                      onClick={signOut}
                    >
                      <b>Logout</b>
                    </button>
                    {props.user.app_metadata.provider === "email" && (
                      <div className="relative z-10">
                        <Button
                          color="sky"
                          label="Reset Password"
                          onClick={() =>
                            props.user.email
                              ? resetPassword()
                              : showResetPasswordWarning()
                          }
                        />
                        <div
                          // Role alert and aria-live announce to screen readers
                          role="alert"
                          aria-live="polite"
                          className={`share-popup pointer-events-none absolute top-0 left-1/2 z-10 w-56 max-w-3xl origin-center rounded-md bg-rose-300 px-4 py-2 text-center text-sm font-bold ${
                            resetWarning && "animate-popup"
                          }`}
                        >
                          <p
                            className={`${
                              !resetWarning && "hidden"
                            } flex items-center justify-center`}
                          >
                            Error resetting your password
                          </p>
                        </div>
                        <div
                          // Role alert and aria-live announce to screen readers
                          role="alert"
                          aria-live="polite"
                          className={`share-popup pointer-events-none absolute top-0 left-1/2 z-10 w-56 max-w-3xl origin-center rounded-md bg-sky-300 px-4 py-2 text-center text-sm font-bold ${
                            isResetting && "animate-popup"
                          }`}
                        >
                          <p
                            className={`${
                              !isResetting && "hidden"
                            } flex items-center justify-center`}
                          >
                            Check your email for the password reset email!
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )
            }

            {
              // === compares types as well as the value
              pageName === "grades" && (
                <div>Hello this is the Saved Grade Page </div>
              )
            }

            {
              // === compares types as well as the value
              pageName === "colleges" && (
                <div>Hello this is the Saved College Page</div>
              )
            }
          </div>
        </div>
      </main>
    </div>
  );
};

export default DashboardPage;

export const getServerSideProps: GetServerSideProps = async (context) => {
  // Create authenticated Supabase Client
  const supabase = createServerSupabaseClient<Database>(context);
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session)
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };

  return {
    props: {
      initialSession: session,
      user: session.user,
    },
  };
};
